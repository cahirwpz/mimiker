#!/usr/bin/python3 -B

from os import environ
import argparse
import logging
import platform
import subprocess

URLS = \
  ['ftp://ftp.gnu.org/gnu/gmp/{gmp}.tar.bz2',
   'ftp://ftp.gnu.org/gnu/mpc/{mpc}.tar.gz',
   'ftp://ftp.gnu.org/gnu/mpfr/{mpfr}.tar.bz2',
   'http://isl.gforge.inria.fr/{isl}.tar.bz2',
   'http://www.bastoul.net/cloog/pages/download/{cloog}.tar.gz',
   'ftp://ftp.gnu.org/gnu/gdb/{gdb}.tar.gz',
   'ftp://ftp.gnu.org/gnu/binutils/{binutils}.tar.bz2',
   'ftp://ftp.gnu.org/gnu/gcc/{gcc}/{gcc}.tar.gz']


from common import * # NOQA


def build():
  for var in list(environ.keys()):
    if var not in ['_', 'LOGNAME', 'HOME', 'SHELL', 'TMPDIR', 'PWD']:
      del environ[var]

  environ['PATH'] = '/usr/bin:/bin'
  environ['LANG'] = 'C'
  environ['TERM'] = 'xterm'

  if platform.system() == 'Darwin':
    cc, cxx = 'clang', 'clang++'
  else:
    cc, cxx = 'gcc', 'g++'

  environ['CC'] = find_executable(cc)
  environ['CXX'] = find_executable(cxx)

  find_executable('bison')
  find_executable('yacc')
  find_executable('flex')
  find_executable('patch')
  find_executable('make')
  find_executable('makeinfo')
  find_executable('git')

  require_header(['ncurses.h', 'ncurses/ncurses.h'],
                 lang='c', errmsg='libncurses5-dev package missing')

  require_header(['python3.7/Python.h'],
                 lang='c', errmsg='libpython3.7-dev package missing')

  environ['PATH'] = ":".join([path.join('{prefix}', 'bin'),
                              path.join('{host}', 'bin'),
                              environ['PATH']])

  with cwd('{archives}'):
    for url in URLS:
      if type(url) == tuple:
        url, name = url[0], url[1]
      else:
        name = path.basename(url)
      fetch(name, url)

  unpack('{gmp}')
  configure('{gmp}',
            '--disable-shared',
            '--prefix={host}')
  make('{gmp}')
  make('{gmp}', 'install')

  unpack('{mpfr}')
  configure('{mpfr}',
            '--disable-shared',
            '--prefix={host}',
            '--with-gmp={host}')
  make('{mpfr}')
  make('{mpfr}', 'install')

  unpack('{mpc}')
  configure('{mpc}',
            '--disable-shared',
            '--prefix={host}',
            '--with-gmp={host}',
            '--with-mpfr={host}')
  make('{mpc}')
  make('{mpc}', 'install')

  unpack('{isl}')
  configure('{isl}',
            '--disable-shared',
            '--prefix={host}',
            '--with-gmp-prefix={host}')
  make('{isl}')
  make('{isl}', 'install')

  unpack('{cloog}')
  configure('{cloog}',
            '--disable-shared',
            '--prefix={host}',
            '--with-isl=system',
            '--with-gmp-prefix={host}',
            '--with-isl-prefix={host}')
  make('{cloog}')
  make('{cloog}', 'install')

  unpack('{binutils}')
  configure('{binutils}',
            '--target={target}',
            '--prefix={prefix}',
            '--datarootdir={prefix}/{target}/share',
            '--with-sysroot={prefix}/{target}',
            '--disable-mutlilib',
            '--disable-nls',
            '--disable-shared',
            '--disable-werror',
            '--with-isl={host}')
  make('{binutils}', LDFLAGS='-Wl,--as-needed')
  make('{binutils}', 'install', DESTDIR='{destdir}')

  target_tools = dict(
    AS_FOR_TARGET='{destdir}{prefix}/bin/{target}-as',
    AR_FOR_TARGET='{destdir}{prefix}/bin/{target}-ar',
    LD_FOR_TARGET='{destdir}{prefix}/bin/{target}-ld',
    NM_FOR_TARGET='{destdir}{prefix}/bin/{target}-nm',
    STRIP_FOR_TARGET='{destdir}{prefix}/bin/{target}-strip',
    RANLIB_FOR_TARGET='{destdir}{prefix}/bin/{target}-ranlib')

  gcc_extra_configure = []
  if getvar('target') == 'mipsel':
    gcc_extra_configure = [
            '--with-arch=mips32r2',
            '--with-abi=32',
            '--with-float=hard']
  if getvar('target') == 'aarch64':
    gcc_extra_configure = [
            '--with-arch=armv8-a',
            '--with-cpu=cortex-a53']
    # We don't need to specify FPU:
    # https://stackoverflow.com/questions/29736921/enable-fpu-support-for-aarch64-armv8-a-on-gcc-version-5-0-1

  unpack('{gcc}')
  configure('{gcc}',
            '--target={target}',
            '--prefix={prefix}',
            '--datarootdir={prefix}/{target}/share',
            '--libexecdir={prefix}/{target}/libexec',
            '--with-sysroot={prefix}/{target}/sysroot',
            '--with-gmp={host}',
            '--with-mpfr={host}',
            '--with-isl={host}',
            '--with-cloog={host}',
            '--enable-lto',
            '--enable-languages=c',
            '--disable-multilib',
            '--disable-nls',
            '--disable-shared',
            '--disable-werror',
            '--with-newlib',
            '--without-headers',
            *gcc_extra_configure)
  make('{gcc}', 'all-gcc', **target_tools)
  make('{gcc}', 'all-target-libgcc', **target_tools)
  make('{gcc}', 'install-gcc', DESTDIR='{destdir}', **target_tools)
  make('{gcc}', 'install-target-libgcc', DESTDIR='{destdir}', **target_tools)

  unpack('{gdb}')
  configure('{gdb}',
            '--target={target}',
            '--prefix={prefix}',
            '--datarootdir={prefix}/{target}/share',
            '--with-sysroot={prefix}/{target}',
            '--with-isl={host}',
            '--disable-binutils',
            '--disable-gas',
            '--disable-ld',
            '--disable-nls',
            '--disable-sim',
            '--disable-werror',
            '--with-tui',
            '--with-python=/usr/bin/python3')
  make('{gdb}', LDFLAGS='-Wl,--as-needed')
  make('{gdb}', 'install', DESTDIR='{destdir}')


def clean():
  rmtree('{stamps}')
  rmtree('{host}')
  rmtree('{build}')


if __name__ == "__main__":
  logging.basicConfig(level=logging.DEBUG, format='%(levelname)s: %(message)s')

  parser = argparse.ArgumentParser(description='Build cross toolchain.')
  parser.add_argument('--target', choices=['mipsel', 'aarch64'],
                      default='mipsel', help='choose target architecture')
  parser.add_argument('action', choices=['build', 'clean'], default='build',
                      help='perform action')
  args = parser.parse_args()

  if platform.system() == 'Darwin':
    nproc = ['sysctl', '-n', 'hw.ncpu']
  else:
    nproc = ['nproc']

  nproc = subprocess.check_output(nproc).strip()

  setvar(top=path.abspath('.'),
         nproc=str(nproc, encoding='utf-8'),
         target='{}-mimiker-elf'.format(args.target))

  setvar(gmp='gmp-6.1.2',
         mpc='mpc-1.1.0',
         mpfr='mpfr-4.0.1',
         isl='isl-0.18',
         cloog='cloog-0.18.4',
         binutils='binutils-2.32',
         gcc='gcc-9.2.0',
         gdb='gdb-8.3',
         stamps=path.join('{top}', '{target}', 'stamps'),
         build=path.join('{top}', '{target}', 'build'),
         sources=path.join('{top}', '{target}', 'sources'),
         host=path.join('{top}', '{target}', 'host'),
         tmpdir=path.join('{top}', '{target}', 'tmp'),
         destdir=path.join('{top}', '{target}'),
         prefix=path.join('/usr'),
         archives=path.join('{top}', '.download'))

  if not path.exists('{destdir}'):
    mkdir('{destdir}')

  eval(args.action + "()")
