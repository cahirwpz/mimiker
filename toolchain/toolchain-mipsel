#!/usr/bin/python3 -B

from fnmatch import fnmatch
from os import environ
import argparse
import logging
import platform
import subprocess
import sys

URLS = \
  ['ftp://ftp.gnu.org/gnu/gmp/gmp-6.1.2.tar.bz2',
   'ftp://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz',
   'ftp://ftp.gnu.org/gnu/mpfr/mpfr-3.1.5.tar.bz2',
   'http://isl.gforge.inria.fr/isl-0.18.tar.bz2',
   'http://www.bastoul.net/cloog/pages/download/cloog-0.18.4.tar.gz',
   'ftp://ftp.gnu.org/gnu/gdb/gdb-7.12.1.tar.gz',
   'ftp://ftp.gnu.org/gnu/binutils/binutils-2.28.tar.bz2',
   'ftp://ftp.gnu.org/gnu/gcc/gcc-6.3.0/gcc-6.3.0.tar.bz2']


from common import * # NOQA


def build():
  for var in list(environ.keys()):
    if var not in ['_', 'LOGNAME', 'HOME', 'SHELL', 'TMPDIR', 'PWD']:
      del environ[var]

  environ['PATH'] = '/usr/bin:/bin'
  environ['LANG'] = 'C'
  environ['TERM'] = 'xterm'

  if platform.system() == 'Darwin':
    cc, cxx = 'clang', 'clang++'
  else:
    cc, cxx = 'gcc', 'g++'

  environ['CC'] = find_executable(cc)
  environ['CXX'] = find_executable(cxx)

  find_executable('bison')
  find_executable('yacc')
  find_executable('flex')
  find_executable('patch')
  find_executable('make')
  find_executable('makeinfo')
  find_executable('git')

  require_header(['ncurses.h', 'ncurses/ncurses.h'],
                 lang='c', errmsg='libncurses5-dev package missing')

  require_header(['python2.7/Python.h'],
                 lang='c', errmsg='libpython2.7-dev package missing')

  environ['PATH'] = ":".join([path.join('{prefix}', 'bin'),
                              path.join('{host}', 'bin'),
                              environ['PATH']])

  with cwd('{archives}'):
    for url in URLS:
      if type(url) == tuple:
        url, name = url[0], url[1]
      else:
        name = path.basename(url)
      fetch(name, url)

  unpack('{gmp}')
  configure('{gmp}',
            '--disable-shared',
            '--prefix={host}')
  make('{gmp}')
  make('{gmp}', 'install')

  unpack('{mpfr}')
  configure('{mpfr}',
            '--disable-shared',
            '--prefix={host}',
            '--with-gmp={host}')
  make('{mpfr}')
  make('{mpfr}', 'install')

  unpack('{mpc}')
  configure('{mpc}',
            '--disable-shared',
            '--prefix={host}',
            '--with-gmp={host}',
            '--with-mpfr={host}')
  make('{mpc}')
  make('{mpc}', 'install')

  unpack('{isl}')
  configure('{isl}',
            '--disable-shared',
            '--prefix={host}',
            '--with-gmp-prefix={host}')
  make('{isl}')
  make('{isl}', 'install')

  unpack('{cloog}')
  configure('{cloog}',
            '--disable-shared',
            '--prefix={host}',
            '--with-isl=system',
            '--with-gmp-prefix={host}',
            '--with-isl-prefix={host}')
  make('{cloog}')
  make('{cloog}', 'install')

  unpack('{binutils}')
  configure('{binutils}',
            '--target={target}',
            '--prefix={prefix}',
            '--with-sysroot={prefix}/{target}',
            '--disable-mutlilib',
            '--disable-nls',
            '--disable-shared',
            '--disable-werror',
            '--with-isl={host}')
  make('{binutils}')
  make('{binutils}', 'install')

  unpack('{gcc}')
  configure('{gcc}',
            '--target={target}',
            '--prefix={prefix}',
            '--with-arch=mips32r2',
            '--with-sysroot={prefix}/{target}/sysroot',
            '--with-abi=32',
            '--with-float=hard',
            '--with-gmp={host}',
            '--with-mpfr={host}',
            '--with-isl={host}',
            '--with-cloog={host}',
            '--enable-lto',
            '--enable-languages=c',
            '--disable-multilib',
            '--disable-nls',
            '--disable-shared',
            '--disable-werror',
            '--with-newlib',
            '--without-headers')
  make('{gcc}', 'all-gcc')
  make('{gcc}', 'all-target-libgcc')
  make('{gcc}', 'install-gcc')
  make('{gcc}', 'install-target-libgcc')

  unpack('{gdb}')
  configure('{gdb}',
            '--target={target}',
            '--prefix={prefix}',
            '--with-sysroot={prefix}/{target}',
            '--with-isl={host}',
            '--disable-binutils',
            '--disable-gas',
            '--disable-ld',
            '--disable-nls',
            '--disable-sim',
            '--disable-werror',
            '--with-python')
  make('{gdb}')
  make('{gdb}', 'install')


def clean():
  rmtree('{stamps}')
  rmtree('{host}')
  rmtree('{build}')
  rmtree('{sources}')


if __name__ == "__main__":
  logging.basicConfig(level=logging.DEBUG, format='%(levelname)s: %(message)s')

  parser = argparse.ArgumentParser(description='Build cross toolchain.')
  parser.add_argument('action', choices=['build', 'clean'], default='build',
                      help='perform action')
  parser.add_argument('--prefix', type=str, default=None,
                      help='installation directory')
  args = parser.parse_args()

  if platform.system() == 'Darwin':
    nproc = ['sysctl', '-n', 'hw.ncpu']
  else:
    nproc = ['nproc']

  nproc = subprocess.check_output(nproc).strip()

  setvar(top=path.abspath('.'),
         nproc=str(nproc, encoding='utf-8'),
         target='mipsel-mimiker-elf')

  setvar(gmp='gmp-6.1.2',
         mpc='mpc-1.0.3',
         mpfr='mpfr-3.1.5',
         isl='isl-0.18',
         cloog='cloog-0.18.4',
         binutils='binutils-2.28',
         gcc='gcc-6.3.0',
         gdb='gdb-7.12.1',
         patches=path.join('{top}', 'patches'),
         submodules=path.join('{top}', 'submodules'),
         stamps=path.join('{top}', '.build-mips', 'stamps'),
         build=path.join('{top}', '.build-mips', 'build'),
         sources=path.join('{top}', '.build-mips', 'sources'),
         host=path.join('{top}', '.build-mips', 'host'),
         tmpdir=path.join('{top}', '.build-mips', 'tmp'),
         prefix=path.join('{top}', '{target}'),
         archives=path.join('{top}', '.build-mips', 'archives'))

  if args.prefix is not None:
    setvar(prefix=args.prefix)

  if not path.exists('{prefix}'):
    mkdir('{prefix}')

  eval(args.action + "()")
