Stop virtual clock as soon as debug exception is triggered.
Index: qemu-mimiker/qemu-5.2.0/gdbstub.c
===================================================================
--- qemu-mimiker.orig/qemu-5.2.0/gdbstub.c
+++ qemu-mimiker/qemu-5.2.0/gdbstub.c
@@ -359,6 +359,7 @@ typedef struct GDBState {
     char *socket_path;
     int running_state;
 #else
+    bool resume_clock;
     CharBackend chr;
     Chardev *mon_chr;
 #endif
@@ -502,8 +503,6 @@ static int gdb_continue_partial(char *ne
     }
     gdbserver_state.running_state = 1;
 #else
-    int flag = 0;
-
     if (!runstate_needs_reset()) {
         if (vm_prepare_start()) {
             return 0;
@@ -518,12 +517,12 @@ static int gdb_continue_partial(char *ne
                 trace_gdbstub_op_stepping(cpu->cpu_index);
                 cpu_single_step(cpu, get_sstep_flags());
                 cpu_resume(cpu);
-                flag = 1;
+                gdbserver_state.resume_clock = true;
                 break;
             case 'c':
                 trace_gdbstub_op_continue_cpu(cpu->cpu_index);
                 cpu_resume(cpu);
-                flag = 1;
+                gdbserver_state.resume_clock = true;
                 break;
             default:
                 res = -1;
@@ -531,9 +530,6 @@ static int gdb_continue_partial(char *ne
             }
         }
     }
-    if (flag) {
-        qemu_clock_enable(QEMU_CLOCK_VIRTUAL, true);
-    }
 #endif
     return res;
 }
@@ -3303,6 +3299,9 @@ static void gdb_chr_receive(void *opaque
     for (i = 0; i < size; i++) {
         gdb_read_byte(buf[i]);
     }
+
+    qemu_clock_enable(QEMU_CLOCK_VIRTUAL, gdbserver_state.resume_clock);
+    gdbserver_state.resume_clock = false;
 }
 
 static void gdb_chr_event(void *opaque, QEMUChrEvent event)
Index: qemu-mimiker/qemu-5.2.0/target/mips/op_helper.c
===================================================================
--- qemu-mimiker.orig/qemu-5.2.0/target/mips/op_helper.c
+++ qemu-mimiker/qemu-5.2.0/target/mips/op_helper.c
@@ -46,6 +46,7 @@ void helper_raise_exception(CPUMIPSState
 
 void helper_raise_exception_debug(CPUMIPSState *env)
 {
+    qemu_clock_enable(QEMU_CLOCK_VIRTUAL, false);
     do_raise_exception(env, EXCP_DEBUG, 0);
 }
 
