Allow GDB to perform address translation without modyfing TLB.
Index: qemu-mimiker/qemu-4.1.0/target/mips/helper.c
===================================================================
--- qemu-mimiker.orig/qemu-4.1.0/target/mips/helper.c
+++ qemu-mimiker/qemu-4.1.0/target/mips/helper.c
@@ -36,6 +36,8 @@ enum {
     TLBRET_MATCH = 0
 };
 
+static int debug_mode = 0;
+
 #if !defined(CONFIG_USER_ONLY)
 
 /* no MMU emulation */
@@ -152,8 +154,10 @@ static int is_seg_am_mapped(unsigned int
         /* fall through */
     check_ade:
         /* does this AM cause AdE in current execution mode */
-        if ((adetlb_mask << am) < 0) {
-            return TLBRET_BADADDR;
+        if(!debug_mode){
+            if ((adetlb_mask << am) < 0) {
+                return TLBRET_BADADDR;
+            }
         }
         adetlb_mask <<= 8;
         /* fall through */
@@ -523,18 +527,53 @@ static void raise_mmu_exception(CPUMIPSS
     env->error_code = error_code;
 }
 
+#define PDE_VADDR(addr) \
+    ((((addr) <= USEG_LIMIT) ? 0xffffe000 : 0xfffff000) + PD_INDEX(addr))
+#define PD_INDEX(addr) (((addr) >> 20) & 0xffc)
+#define PT_INDEX(addr) (((addr) >> 10) & 0xffc)
+#define PG_OFFSET(addr) ((addr) & 0xfff)
+#define PHYSADDR(pte) (((pte) & 0x03ffffc0) << 6)
+#define VALID(pte) ((pte) & 2)
+
 #if !defined(CONFIG_USER_ONLY)
 hwaddr mips_cpu_get_phys_page_debug(CPUState *cs, vaddr addr)
 {
     MIPSCPU *cpu = MIPS_CPU(cs);
     CPUMIPSState *env = &cpu->env;
     hwaddr phys_addr;
+    /* Setting EXL==3 just to allow GDB reading kernel memory while
+     * on breakpoint in user-space. */
+    int mem_idx = cpu_mmu_index(env, false);
     int prot;
+    debug_mode = 1;
 
     if (get_physical_address(env, &phys_addr, &prot, addr, 0, ACCESS_INT,
-                             cpu_mmu_index(env, false)) != 0) {
+                             mem_idx) != 0) {
+        vaddr pde_vaddr = PDE_VADDR(addr);
+        hwaddr pde_addr;
+
+        if (get_physical_address(env, &pde_addr, &prot, pde_vaddr, 0,
+                                 ACCESS_INT, mem_idx) == 0) {
+            uint32_t pde, pte;
+            cpu_physical_memory_read(pde_addr, (void *)&pde, sizeof(pde));
+            if (!VALID(pde)){
+              debug_mode = 0;
+              return -1;
+            }
+            hwaddr pte_addr = PHYSADDR(pde) + PT_INDEX(addr);
+            cpu_physical_memory_read(pte_addr, (void *)&pte, sizeof(pte));
+            if (!VALID(pte)){
+              debug_mode = 0;
+              return -1;
+            }
+            debug_mode = 0;
+            return PHYSADDR(pte) + PG_OFFSET(addr);
+        }
+
+        debug_mode = 0;
         return -1;
     }
+    debug_mode = 0;
     return phys_addr;
 }
 #endif
