#!/bin/sh
# $NetBSD: genhash,v 1.9 2017/01/11 20:53:52 roy Exp $

# Copyright (c) 2009, 2011 The NetBSD Foundation, Inc.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Roy Marples.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# Generate string and hash tables for our terminfo strings in term.h
# We don't expose the hash or tables directly, but instead via functions.
# This allows us to freely change how we hash or store our string tables
# in the future.

set -e

TERMH=${1:-term.h}
STRUCT_NAME=_ti_gperf_key
STRUCT_DECL="struct $STRUCT_NAME { const char *name; size_t idx; };"

genent()
{
  local name=$1 NAME=$2 len=

  # Calculate the maximum word length plus terminator
  len=$(sed -e "1,/enum TI${NAME}/d" -e '/};/,$d' \
            -e 's/.*TICODE_\([^,]*\).*/\1X/' $TERMH | \
            awk 'BEGIN {L=0} {if (length($1)>L) L=length($1)} END {print L}')

  echo
  echo "static const char _ti_${name}ids[][${len}] = {"
  sed -e "1,/enum TI${NAME}/d" -e '/};/,$d' \
      -e 's/.*TICODE_\([^,]*\).*/  "\1",/' $TERMH

  echo "};"
  echo
  sed -e "1,/enum TI${NAME}/d" -e '/};/,$d' \
      -e 's/.*TICODE_\([^,]*\).*/\1/' $TERMH | \
      awk "BEGIN {print \"$STRUCT_DECL\n%%\"} {print \$0 \", \" NR-1}" | \
      gperf --compare-strncmp --hash-function-name=_ti_${name}hash \
            --lookup-function-name=_ti_${name}lookup --enum \
            --struct-type --omit-struct-type --initializer-suffix=", 0"

  cat <<EOF

const char *
_ti_${name}id(ssize_t idx)
{

  if ((size_t)idx >= __arraycount(_ti_${name}ids))
    return NULL;
  return _ti_${name}ids[idx];
}

ssize_t
_ti_${name}index(const char *key)
{
  struct $STRUCT_NAME *p;

  p = _ti_${name}lookup(key, strlen(key));
  return (p ? (ssize_t)p->idx : -1);
}
EOF
}

cat <<EOF
/* DO NOT EDIT
 * Automatically generated from term.h */

#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <term_private.h>
#include <term.h>

$STRUCT_DECL

EOF

genent flag FLAG
genent num NUM
genent str STR
