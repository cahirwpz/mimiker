/*******************************************************************************
 *
 * Copyright 2014-2015, Imagination Technologies Limited and/or its
 *                      affiliated group companies.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************/

/******************************************************************************
*                 file : $RCSfile: _flavour.h,v $ 
*               author : $Author Imagination Technologies Ltd
*    date last revised : $
*      current version : $
******************************************************************************/

/* Controls feature-set for each build variant: small or tiny */

#ifndef _FLAVOUR_H_
#define _FLAVOUR_H_

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __mips_clib_tiny
#define __TINY__
#endif

#ifdef __mips_clib_small
#define __SMALL__
#endif

#ifdef __TINY__
#define __NO_HEX_FP__

/* Defined to support only the 3 standard I/O streams */
#define __STATIC_IO_STREAMS__

/* Prefer smallest possible code-size for tiny library */
#define __PREFER_SIZE_OVER_SPEED__

/* Sacrifice 1 ULP in accuracy where possible to decrease code size */
// #define __MATH_SIZE_OVER_ULP__

#else  /* !__TINY__ == __SMALL__ */

#define __USE_LOCALE__

#define __IEEE754__

/* Enable handling of multi-byte character sets */
#define _MB_CAPABLE 1

/* Enable handling of NaN and infinity */
#define __MATH_NONFINITE__

/* Correct processing of denormal input */
#define __MATH_SUBNORMAL__

/* Relevant for elementary transcendentals (sin/cos/tan)
Do proper range reduction, even for numbers beyond 2^64.
Uses Payne-Hanek reduction and results in significantly bigger code */
#define __MATH_FULLRANGE_REDUCTION__

/* Execute additional code which does nothing relevant to correctness of 
the output, but generates the correct expected floating-poing exceptions
as per ISO C standard */
#define __MATH_EXCEPTION__

/* Execute additional code which does nothing relevant to correctness of 
the output, but generates the floating-point exceptions which are not 
required by C standard, but are generated by Newlib */
/* Disabled by default */
/* #define __MATH_MATCH_NEWLIB_EXCEPTION__ */

#endif /* __TINY__ */



/* Uncomment this to force soft-float implementation */
/* #define __MATH_SOFT_FLOAT__ */

/* Prefer soft-float as enforced by C command-line */
#ifdef __mips_soft_float
#define __MATH_SOFT_FLOAT__
#endif /* __math_soft_float */

#if defined(__mips16) && defined(__mips_soft_float)
#define MATH_ABI_MODE __attribute__((mips16))
#endif

/* Uncomment this to prefer loading select constants for rodata section.
The alternate code uses 3 instructions to generate the constant value,
instead of 2 instructions in the load-from-memory case */
/* #define __MATH_CONST_FROM_MEMORY__ */

#ifdef __MATH_SOFT_FLOAT__
#define __MATH_CONST_FROM_MEMORY__
#endif /* __MATH_SOFT_FLOAT__ */

/* Uncomment this to include extra code that causes IASim output to 
match Intel x86 output. This does not affect correctness, since the 
output only ever differs in those cases where it is undefined, but
it may be useful for batch test-runs or debugging */
/* #define __MATH_MATCH_x86_IASim__ */

/* Uncomment this to include extra code that causes Mips output (IASim &
GNUSim) to match Intel x86 output. This does not affect correctness,
since the output only ever differs in those cases where it is
undefined, but it may be useful for batch test-runs or debugging */ 
/* #define __MATH_MATCH_x86_IASim__ */

#ifdef __MATH_MATCH_x86_IASim__
#define __MATH_MATCH_x86__
#endif /* __MATH_MATCH_x86_IASim__ */

/* Allow use of ins instruction to set register bits.
   Only supported on R2 ISA variants, not supported with mips16 encoding */
#if !defined(__mips16)
#define __HW_SET_BITS__
#endif /* _MIPS_ARCH_MIPS32R2 || _MIPS_ARCH_MIPS64R2 */

/* Allow use of ins instruction to clear register bits in favour and
   masking by and operation.  Only supported on R2 ISA variants,
   not supported with mips16 encoding. */
#if !defined(__mips16)
#define __HW_CLEAR_BITS__
#endif /* _MIPS_ARCH_MIPS32R2 || _MIPS_ARCH_MIPS64R2 */

/* This controls the use of clz instruction for float/double value, not supported for mips16 mode */
#if !defined(__mips16) || !defined(__mips_soft_float) 
#define __HW_COUNT_LEAD_ZEROS__  /* For CLZ rt, rs */
#endif

/* Uncomment this to enable select optimizations that favour 
   performance over code-size */
/* #define __MATH_SPEED_OVER_SIZE__ */

/* Uncomment this to avoid branches at the expense of larger code size */
/* #define __MATH_AVOID_BRANCH__ */

#ifdef __MATH_SPEED_OVER_SIZE__
#define __MATH_AVOID_BRANCH__
#endif /* __MATH_SPEED_OVER_SIZE__ */


/* Comment this to build with legacy (IEEE754-1985) behaviour for select
   instruction - affects floating point negation and fabs operations */
#ifdef __mips_abs2008
#define __MATH_IEEE754_2008__
#endif /* __mips_abs2008 */

#ifdef __cplusplus
}
#endif
#endif /* _FLAVOUR_H_ */
