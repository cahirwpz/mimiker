#!/usr/bin/python3

import argparse
import os
import os.path
import signal
import subprocess
import shlex
from pexpect import popen_spawn

OVPSIM_VENDOR = 'mips.ovpworld.org'
OVPSIM_PLATFORM = 'MipsMalta/1.0'
TRIPLET = 'mips-mti-elf'
PORT = 8000

OVPSIM = os.path.join(os.environ['IMPERAS_HOME'],
                      'lib/Linux32/ImperasLib', OVPSIM_VENDOR,
                      'platform', OVPSIM_PLATFORM, 'platform.Linux32.exe')

OVPSIM_OPTIONS = ['--root', '/dev/null', '--nographics', '--wallclock']
OVPSIM_OVERRIDES = {
    "mipsle1/vectoredinterrupt": 1,
    "mipsle1/srsctlHSS": 1,
    "rtc/timefromhost": 1,
    "uartCBUS/console": 1,
    "uartCBUS/portnum": PORT
}

DEBUGGERS = {
    'gdb'   : 'TRIPLET-gdb KERNEL',
    'cgdb'  : 'cgdb -d TRIPLET-gdb KERNEL',
    'ddd'   : 'ddd --debugger TRIPLET-gdb KERNEL',
    'gdbtui': 'TRIPLET-gdb -tui',
    'emacs' : 'emacsclient -c -e \'(gdb "TRIPLET-gdb -i=mi KERNEL")\''
}

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Launch OVPsim with Malta board.')
    parser.add_argument('kernel', metavar='KERNEL', type=str,
                        help='Kernel file in ELF format.')
    parser.add_argument('-d', '--debug', action='store_true',
                        help='Start simulation under gdb.')
    parser.add_argument('-D', metavar='DEBUGGER', type=str, dest='debugger',
                        help='Debugger to use in -d mode. Available options: '
                        '"cgdb" (default), "gdb", "gdbtui", "ddd", "emacs".')
    parser.add_argument('-t', '--test', action='store_true',
                        help='Use current stdin & stdout for simulated UART.')

    args = parser.parse_args()

    if args.test:
        OVPSIM_OVERRIDES["uartCBUS/console"] = 0

    if not os.path.isfile(args.kernel):
        raise SystemExit("%s: file does not exist!" % args.kernel)

    opts = ['--kernel', args.kernel]
    opts += OVPSIM_OPTIONS
    for item in OVPSIM_OVERRIDES.items():
        opts += ['--override', '%s=%s' % item]
    if args.debug:
        opts += ['--port', '1234']

    try:
        os.remove('uartCBUS.log')
        os.remove('uartTTY0.log')
        os.remove('uartTTY1.log')
    except OSError:
        pass

    if args.debug:

        if not args.debugger:
            args.debugger = 'cgdb'

        if not args.debugger in DEBUGGERS:
            raise SystemExit('Unrecognized debugger %s selected.' % args.debugger)

        dbgcmd = DEBUGGERS[args.debugger]
        dbgcmd = dbgcmd.replace("KERNEL", args.kernel);
        dbgcmd = dbgcmd.replace("TRIPLET", TRIPLET);
        dbgcmd = shlex.split(dbgcmd)

        sim = subprocess.Popen([OVPSIM] + opts,
                               start_new_session=True)
        gdb = subprocess.Popen(dbgcmd, start_new_session=True)
        while True:
            try:
                gdb.wait()
                sim.send_signal(signal.SIGINT)
                break
            except KeyboardInterrupt:
                gdb.send_signal(signal.SIGINT)
    elif args.test:
        sim = popen_spawn.PopenSpawn([OVPSIM] + opts)
        sim.expect("Waiting for connection on port %d" % PORT, timeout=5)
        nc = subprocess.Popen(['nc', 'localhost', str(PORT)])
        while True:
            try:
                sim.wait()
                break
            except KeyboardInterrupt:
                sim.kill(signal.SIGINT)
    else:
        sim = subprocess.Popen([OVPSIM] + opts)
        try:
            sim.wait()
        except KeyboardInterrupt:
            sim.send_signal(signal.SIGINT)
