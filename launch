#!/usr/bin/env python3

import argparse
import os
import os.path
import subprocess
import sys

from launcher import *


TMUX_CONF = './.tmux.conf'


def TestRun(sim, uarts):
    sim.run()
    for uart in uarts:
        uart.run()

    try:
        Launchable.wait_any([sim] + uarts)
    except KeyboardInterrupt:
        pass

    for uart in reversed(uarts):
        uart.stop()
    sim.stop()


def DevelRun(sim, dbg, uarts):
    from libtmux import Server, Session

    subprocess.run(['tmux', '-f', TMUX_CONF, '-L', 'mimiker', 'start-server'])

    server = Server(config_file=TMUX_CONF, socket_name='mimiker')

    if server.has_session('mimiker'):
        server.kill_session('mimiker')

    session = server.new_session(session_name='mimiker', attach=False,
                                 window_name=':0', window_command='sleep 1')

    try:
        sim.start(session)
        for uart in uarts:
            uart.start(session)
        if dbg:
            dbg.start(session)

        session.kill_window(':0')
        session.select_window(dbg.name if dbg else '/dev/cons')
        session.attach_session()
    finally:
        session.kill_session()
        server.kill_server()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Launch kernel in Malta board simulator.')
    parser.add_argument('-k', '--kernel', metavar='KERNEL', type=str,
                        default='sys/mimiker.elf',
                        help='Kernel image file in ELF format.')
    parser.add_argument('--initrd', metavar='INITRD', type=str,
                        default='initrd.cpio',
                        help='Initial RAM disk in CPIO format.')
    parser.add_argument('args', metavar='ARGS', type=str,
                        nargs=argparse.REMAINDER, help='Kernel arguments.')
    parser.add_argument('-D', '--debugger', metavar='DEBUGGER', type=str,
                        choices=Debuggers.keys(), default='gdb',
                        help=('Run debugging sesion with selected debugger. '
                              'Available options: %s. Default: %s.' %
                              (', '.join(sorted(Debuggers.keys())), 'gdb')))
    parser.add_argument('-d', '--debug', action='store_true',
                        help='Start debugging session with selected debugger.')
    parser.add_argument('-t', '--test-run', action='store_true',
                        help='Test-run mode: simulator output goes to stdout.')
    parser.add_argument('-g', '--graphics', action='store_true',
                        help='Enable VGA output.')
    args = parser.parse_args()

    # Check if the kernel file is available
    if not os.path.isfile(args.kernel):
        raise SystemExit('%s: file does not exist!' % args.kernel)

    # Used by tmux to override ./.tmux.conf with ./.tmux.conf.local
    os.environ['MIMIKER_REPO'] = os.path.dirname(os.path.realpath(sys.argv[0]))

    sim = QEMU()
    sim.configure(debug=args.debug, graphics=args.graphics, kernel=args.kernel,
                  initrd=args.initrd, args=args.args)

    if args.debug:
        dbg = Debuggers[args.debugger]()
        kernel_args = dict(arg.split('=', 1) for arg in args.args)
        if 'test' in kernel_args:
            host_path = "sysroot/bin/utest.dbg"
        elif 'init' in kernel_args:
            host_path = f"sysroot{kernel_args['init']}.dbg"
        else:
            host_path = None

        ex_cmds = []
        if host_path is not None:
            load_symbol_cmd = f'add-symbol-file {host_path} 0x400000'
            ex_cmds.append(load_symbol_cmd)
        dbg.configure(kernel=args.kernel, extra_ex_cmds=ex_cmds)
    else:
        dbg = None

    uart0 = SOCAT('/dev/tty1')
    uart0.configure(uart_num=0)

    uart1 = SOCAT('/dev/tty2')
    uart1.configure(uart_num=1)

    uart2 = SOCAT('/dev/cons')
    uart2.configure(uart_num=2)

    uarts = [uart0, uart1, uart2]

    if args.test_run:
        TestRun(sim, uarts)
    else:
        DevelRun(sim, dbg, uarts)
