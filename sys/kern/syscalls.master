; Mimiker system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)

#include <sys/time.h>
#include <sys/ucontext.h>
#include <sys/sigtypes.h>

#define SCARG(p, x) ((p)->x.arg)
#define SYSCALLARG(x) union { register_t _pad; x arg; }

0   { int sys_syscall(int number); }
1   { void sys_exit(int rval); }
2   { int sys_fork(void); }
3   { ssize_t sys_read(int fd, void *buf, size_t nbyte); }
4   { ssize_t sys_write(int fd, const void *buf, size_t nbyte); }
5   { int sys_openat(int fd, const char *path, int flags, ... mode_t mode); }
6   { int sys_close(int fd); }
7   { off_t sys_lseek(int fd, off_t offset, int whence); }
8   { int sys_unlinkat(int fd, const char *path, int flag); }
9   { pid_t sys_getpid(void); }
10  { int sys_kill(pid_t pid, int sig); }
11  { int sys_fstat(int fd, struct stat *sb); }
12  { void *sys_sbrk(intptr_t increment); }
13  { void *sys_mmap(void *addr, size_t len, int prot, int flags, \
                     int fd, off_t pos); }
14  { int sys_mount(const char *type, const char *path); }
15  { int sys_getdents(int fd, void *buf, size_t len); }
16  { int sys_dup(int fd); }
17  { int sys_dup2(int from, int to); }
18  { int sys_sigaction(int signum, const struct sigaction *nsa, \
                        struct sigaction *osa); }
19  { int sys_sigreturn(ucontext_t *sigctx_p); }
20  { int sys_wait4(pid_t pid, int *status, int options, struct rusage *rusage); }
21  { int sys_mkdirat(int fd, const char *path, mode_t mode); }
22  { int sys_symlinkat(const char *target, int newdirfd, const char *linkpath); }
23  { int sys_faccessat(int fd, const char *path, int mode, int flags); }
24  { int sys_fstatat(int fd, const char *path, struct stat *sb, int flag); }
25  { int sys_pipe2(int *fdp, int flags); }
26  { int sys_clock_gettime(clockid_t clock_id, struct timespec *tsp); }
27  { int sys_clock_nanosleep(clockid_t clock_id, int flags, \
                              const struct timespec *rqtp, \
                              struct timespec *rmtp); }
28  { int sys_execve(const char *path, char * const *argp, \
                     char * const *envp); }
29  { pid_t sys_getppid(void); }
30  { int sys_setpgid(pid_t pid, pid_t pgid); }
31  { int sys_getpgid(pid_t pid); }
32  { mode_t sys_umask(mode_t newmask); }
33  { int sys_munmap(void *addr, size_t len); }
34  { int sys_mprotect(void *addr, size_t len, int prot); }
35  { int sys_chdir(const char *path); }
36  { int sys_getcwd(char *buf, size_t len); }
37  { int sys_sigaltstack(const stack_t *ss, stack_t *old_ss); }
38  { int sys_sigprocmask(int how, const sigset_t *set, sigset_t *oset); }
39  { int sys_setcontext(const ucontext_t *ucp); }
40  { int sys_ioctl(int fd, u_long cmd, ... void *data); }
41  { int sys_getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }
42  { int sys_getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }
43  { int sys_setresuid(uid_t ruid, uid_t euid, uid_t suid); }
44  { int sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid); }
45  { int sys_issetugid(void); }
46  { int sys_fcntl(int fd, int cmd, ... void *arg); }
47  { int sys_truncate(const char *path, off_t length); }
48  { int sys_ftruncate(int fd, off_t length); }
49  { ssize_t sys_readlinkat(int fd, const char *path, char *buf, size_t bufsiz); }
50  { int sys_fchdir(int fd); }
51  { int sys_linkat(int fd1, const char *name1, int fd2, const char *name2, int flags); }
52  { int sys_fchmod(int fd, mode_t mode); }
53  { int sys_fchmodat(int fd, const char *path, mode_t mode, int flag); }
54  { void sys_sched_yield(void); }
55  { int sys_sigsuspend(sigset_t *sigmask); }
56  { int sys_statvfs(const char *path, struct statvfs *buf); }
57  { int sys_fstatvfs(int fd, struct statvfs *buf); }
58  { int sys_getgroups(int ngroups, gid_t *gidset); }
59  { int sys_setgroups(int ngroups, const gid_t *gidset); }
60  { pid_t sys_setsid(void); }
61  { pid_t sys_getsid(pid_t pid); }
62  { int sys_getpriority(int which, id_t who); }
63  { int sys_setpriority(int which, id_t who, int prio); }
64  { int sys_setuid(uid_t uid); }
65  { int sys_seteuid(uid_t euid); }
66  { int sys_setreuid(uid_t ruid, uid_t euid); }
67  { int sys_setgid(gid_t gid); }
68  { int sys_setegid(gid_t egid); }
69  { int sys_setregid(gid_t rgid, gid_t egid); }
70  { int sys_fchown(int fd, uid_t uid, gid_t gid); }
71  { int sys_fchownat(int fd, const char *path, uid_t uid, gid_t gid, int flag); }
72  { int sys_getlogin(char *namebuf, size_t buflen); }
73  { int sys_setlogin(char *name); }
74  { int sys_posix_openpt(int flags); }

; vim: ts=4 sw=4 sts=4 et
